General
----------
This is project for https://arxiv.org/abs/2111.07725.


Usage
----------
1. Run demonstration script 
   $: bash 00_demo.sh PATH_TO_PROJECT
   where PATH_TO_PROJECT can be one of this folder name
   model-W2V-XLSR-ft-GF/config_train_asvspoof2019
   model-W2V-XLSR-ft-LGF/config_train_asvspoof2019
   model-W2V-XLSR-ft-LLGF/config_train_asvspoof2019
   ...

   You may try 
   $: bash 00_demo.sh model-W2V-XLSR-ft-GF/config_train_asvspoof2019

   This demo.sh will 
   1. load environment
   2. download pre-trained SSL models, CM models, toy dataset
   3. scoring the toy test set using pre-trained models
   4. train a new model (using toy test set)
   6. scoring the toy test set using the newly trained model
 
   In this project, we will not compute EERs. 

   To compute EERs, please check tools in 
   02_evaluate.py
   or 
   https://www.asvspoof.org/resources/tDCF_python_v2.zip
   or 
   http://github.com/asvspoof-challenge/2021

    
2. To train the model using ASVspoof 2019 LA data, please 
   download [ASVspoof 2019 LA](https://doi.org/10.7488/ds/2555) 
   and convert FLAC to WAV

   Put eval set waves to ./DATA/asvspoof2019_LA/eval
   Put train and dev sets to ./DATA/asvspoof2019_LA/train_dev
   
   Make sure that the two folders contain the waveform files: 

   $: ls DATA/asvspoof2019_LA/eval 
   LA_E_1000147.wav
   LA_E_1000273.wav
   LA_E_1000791.wav
   LA_E_1000841.wav
   LA_E_1000989.wav
   ...
   $: ls DATA/asvspoof2019_LA/eval | wc -l
   71237

   $: ls DATA/asvspoof2019_LA/train_dev
   LA_D_1000265.wav
   LA_D_1000752.wav
   LA_D_1001095.wav
   LA_D_1002130.wav
   LA_D_1002200.wav
   LA_D_1002318.wav
   ...

   $: ls DATA/asvspoof2019_LA/train_dev | wc -l
   50224


3. To scoring other test sets, please download them and
   follow the example in 00_demo.sh step 5.
   
   ASVspoof 2015: \url{https://doi.org/10.7488/ds/298}
   ASVspoof 2019: \url{https://doi.org/10.7488/ds/2555} 
   ASVspoof 2021:
      LA scenario \url{https://doi.org/10.5281/zenodo.4837263}
      DF scenario \url{https://doi.org/10.5281/zenodo.4835108}
     
4. Play with statistical analysis tool 02_statistical_analysis.ipynb
   This is a Jupyter notebook on statistical analysis of EERs.
   
Folder structure
----------------
Files marked with = are generated after running 00_demo.sh.

|- DATA: data folder 
|  |= asvspoof2019_LA
|  |  |= protocol.txt: 
|  |  |   protocol file
|  |  |   this will be loaded by pytorch code for training and evaluation
|  |  |= scp: 
|  |  |   list of files for traing, dev, and eval
|  |  |= train_dev: 
|  |  |   waveform for train and validation sets   
|  |  |= eval: 
|  |  |   waveform for evaluation sets   
|  |
|  |= bc_release (folder for Blizzard Challenge, same structure as asvspoof2019_LA)
|  |= espnet_release (folder for ESPnet data, same structure as asvspoof2019_LA)
|  |= vcc_release  (folder for VCC data, same structure as asvspoof2019_LA)
|
|- 00_demo.sh: demo script
|- 01_eval.sh: script that will be used for scoring the test set
|- 01_train.sh: script that will be used for training a model
|- 02_evaluate.py: python script to compute EERs
|- 02_stat_analysis.ipynb: notebook on statistical analysis
|- config_train_asvspoof2019.py: configuration to use training set of ASVspoof2019 LA
|- config_train_toyset.py: configuration to use toy data set
|- config_auto.py: general configuration file for inference 
|- main.py: main.py that will be used by each model for training/scoring
|
|- model-W2V-XLSR-ft-GF: project to use wav2vec-XLSR-fine-tuned + backend GF
|  |- config_train_asvspoof2019 (systems trained using config_train_asvspoof2019.py)
|  |  |- 01 (runnning using the first random seed)
|  |  |  |- model.py: model definition, Pytorch code
|  |  |  |= 01_train.sh: script copied from the root
|  |  |  |= 01_eval.sh:  script copied from the root
|  |  |  |= main.py:     main.py copied from the root
|  |  |  |= config_*.py: configuration files copied from the root
|  |  |  |= __pretrained
|  |  |  | |= trained_network.pt: pre-trained model by Xin
|  |  |  |
|  |  |  |= trained_network.pt: trained model after the full training process
|  |  |  |= *.dic: 
|  |  |  |   cache files to save the duration information of each trial
|  |  |  |   they are automatically generated by the code
|  |  |  |   they can be deleted freely
|  |  |  |= log_train: training log
|  |  |  |= log_train_err: error log (it also contains the training loss of each trial)
|  |  |  |= log_gen_err: error log during scoring
|  |  |  |= log_output_*: evaluation log
|  |  |  |= log_output_pretrained_*_score.txt: score of each trial, using pre-trained models
|  |  |  |= log_output_trained_*_score.txt: score of each trial, using newly trained models
|  | 
|- ...


log_train_*.txt is self-explanable.

log_eval_*_score.txt has five columns (see Note 2):
  File name, label, score, confidence
  LA_E_1066571, 1, 19.160793, 20.1

Note
----------
1. Downloading pre-trained SSL and CM models may take some time

2. If GPU memory is insufficient, please reduce --batch-size in 01_train.sh

3. Output score has this following format:

   File name, label, score, confidence
   LA_E_1066571, 1, 19.160793, 20.1

   If label of the trial is given in the protocol file, the label will be: 
     0, which denotes spoof
     1, which denotes bona fide

   If label of the trial is not given in the protocol file, the label will be:
     -1, which means unknown (not provided)

   Confidence score is introduced from ../06-asvspoof-ood. It is not used in this project.

4. Accordingly, the code assumes 0 and 1 as the tables for spoof and bona fide
   trials, respectively. 
     
5. main.py and config.py in this project are slightly different from those in 02_asvspoof, 
   03_asvspoof_mega, 04_asvspoof_toy. 
   Here, the main.py and config.py support merging multiple
   datasets (although this project only uses one) into one concatenated training set. 
   Thus, don't mix main.py and config.py from different projects.

6. For a high-level explanation on how the functions and objects work in the script, please
   check ../../README.md

That's all